type Specialization {
    id: ID!,
    name: String!,
    parent_id: Int
}

type UserStatus {
    id: ID!,
    name: String!,
    code: String!
}

type User {
    id: ID!,
    name: String,
    status: UserStatus @belongsTo,
    specializations: [Specialization] @hasManyThrough
}

type Query {
    specialization(id: ID! @eq): Specialization @find
    userStatus(id: ID! @eq): UserStatus @find
    user(id: ID! @eq): User @find
    users: [User!]! @all
    usersPaginate: [User!]! @paginate
}

type Mutation {
    CreateUserWithSpecialization(
        input: createUserInput! @spread
    ): User
}

input createUserInput {
    name: String
    status_id: Int
    specialization: CreateSpecializationsHasManyThrough!
}

input CreateSpecializationsHasManyThrough{
    create: [CreateSpecializationInput!]
}

input CreateSpecializationInput {
    name: String! @rules(
        apply: ["required"]
        messages: [
            {
                rule: "required",
                message: "Please, enter the name of the specialization"
            }
        ]
    )
}
